Timesheet

Miércoles 18-3  	
1h Investigación
2h Creación de código

Viernes 20-3	
1h Investigación
3h Creación de código

Miércoles 25-3	
2h Creación de código

Sábado 28-3	
3h Creación de código

Domingo 29-3	
1h Creación de código

Lunes 30-3	
1h Creación de código

Martes 31-3	
2h Creación de código

Miércoles 1-4
5h Creación de código

Jueves 2-4
12h Documentación

Viernes 3-4
1h Investigación
6h Creación de código

Sábado 4-4
2h Investigación
6h Creación de código

Domingo 5-4
3h Creación de código


Bitácora

Miércoles 18-3   	
Investigación:      Funcionamiento de heap y manejo de memoria en C++.
Creación de código: Se implementa la estructura básica del vHeap y vRef.

Viernes 20-3	
Investigación:      Manejo de memoria en C++.
Creación de código: Se implementa el método vMalloc y vFree. Luego de ciertos inconvenientes se logra.

Miércoles 25-3	
Creación de código: Se implementa la clase vString y método vPlacement.

Sábado 28-3	
Creación de código: Se implementa el metodo para extraer un dato de una referencia.
                    Se sobrecargan los operadores de vRef.
                    Se crea una interfaz funcional para acceder al vHeap sin llamarlo directamente.

Domingo 29-3	
Creación de código: Se implementa parte de las clases vInt y vChar.

Lunes 30-3	
Creación de código: Se implementa parte de las clases vLong y vFloat.
                    Se detecta error extraño en vPlacement que indica la no existencia de vRef.

Martes 31-3	
Creación de código: Se finalizan los vTypes implementando operadores.

Miércoles 1-3	
Creación de código: Se mejora la implementación de clases vSimpleNode y vSimpleList para que esté alojada en vHeap.
                    Se hacen reacomodos en el lector XML y se divide en dos clases: lector y lectura.

Jueves 2-3	
Documentación externa

Viernes 3-3
Investigación:      Swap entre punteros.
Creación de código: Se mejora la implementación de vRef con el uso de templates para dar una mayor transparencia en codigo y facilitar la dereferencia.
                    Se crea el desfragmentador y se deja listo para coordinar con vHeap.
                    Se crea un control de IDs borrados en Metadata para no requerir reacomodo en los mismos.

Sábado 4-3
Investigación:      Escritura y lectura de archivos binarios en c++.
                    Función to_string() de c++11 y requerimientos para su uso.
Creación de código: Se activa la bandera para que g++ siga el protocolo de c++11 y asi poder utilizar to_string().
                    Se implementa el paginador con exito.
                    Se cambia el valor de retorno de derefereciación de T a T* y se arregla el problema de operadores con vTypes.
                    Se convierte a vMetaData en singleton, ya que no es posible incluir a vHeap en vRef y a vRef en vHeap al mismo tiempo.
                    Se crea un puente de comunicación entre ambas vHeap y vRef utilizando el singleton de vMetaData.
                    Se implemente el pthread para vDefragmenter con su respectiva variable de condición para que se active cada vez que se hace un vFree.

Sábado 4-3
Creación de código: Se coordina vHeap, vMetaData y vPager, dejando la paginación y la subida y bajada de objetos lista.
                    Se soluciona indefinición de vPlacement.

Domingo 5-3
Creación de código: Se arregla error con cMake.
                    Se coordinar vGarbageCollector con vDefragmenter.
                    Se terminar vDump.

Lunes 6-3
Creación de código: TODO: implementar vArray
                    TODO: cambiar vBinaryTree de heap a vHeap
                    TODO: cambiar vString de heap a vHeap
                    TODO: cambiar vSimpleList de heap a vHeap
                    TODO: implementar vDoubleList
                    TODO: implementar vDebuger
                    TODO: aplicación de prueba
                    TODO: vHeap como servidor
                    TODO: visores de uso y dump de memoria
                    TODO: malloc -> calloc
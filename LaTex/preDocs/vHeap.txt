Clase vHeap


Ámbito privado:

friend class Dump;
Se declara la clase Dump como amiga con el fin eliminar la privacidad entre estas dos clases.

bool* vDebug;
Puntero a variable booleana que indica si se debe realizar el debug.

int* dumpFrecuency;
Puntero a variable entera que indica la frecuencia con la que se realizara un dump de memoria.

static vHeap* vHeapSingleton;
Puntero a vHeap que contiene la única instancia de vHeap.

float* overweight; 
Puntero a variable de punto flotante con valor entre 0 y 1 que corresponde a la sobrecarga de vHeap.

void* mainChunk;
Abstracción del concepto de heap. Puntero a memoria dinámica que contendrá los datos que el programa requiera almacenar en ejecución.

void* initPos;
Dirección inicial del mainChunk.

void* finalPos;
Dirección final del mainChunk.

void* actualPos; 
Dirección actual en el mainChunk, se aumenta cada vez que se reserva memoria con vMalloc y con la desfragmentación y sobrecarga se evita que se salga del mismo.

pthread_mutex_t memoryMutex; 
Mutex de pthread que se utilizará para controlar el acceso a memoria en heap en operaciones delicadas.

vMetaData* metaData; 
Puntero a vMetaData que se utilizará para llevar un control de los datos guardados en el mainChunk.



Ámbito público:

vHeap(int,float);
Parámetros: 	
int: tamaño de heap en MB.
float: valor entre creo y uno correspondiente al porcentaje de sobrecarga del   heap.
Proceso realizado: 
inicializa los atributos de la clase.
~vHeap();
Proceso realizado: destruye las variable guardadas por vHeap.

vRef vMalloc(int, std::string);
Parámetros:
int: tamaño de la referencia solicitada.
std::string: tipo de la referencia.
Proceso realizado:
Reserva un espacio en mainChunk, crea el metadato respectivo, aumenta la posición actual y retorna la referencia al mismo.

void vFree(vRef);
Parámetros:
vRef: referencia a eliminar.
Proceso realizado:
Elimina el metadato correspondiente, dejando en condición utilizable el espacio antes ocupado.

void vFree(unsigned int);
Parámetros:
unsigned int: id de referencia a eliminar.
Proceso realizado:
Elimina el metadato correspondiente, dejando en condición utilizable el espacio antes ocupado.

static vHeap* getInstance();
Proceso realizado: 
si ya se ha instanciado un vHeap lo retorna, de lo contrario crea uno, lo asigna y lo retorna.

vMetaData* getMetaData();
Proceso realizado: 
retorna un puntero a la vMetaData del vHeap.

int removeVRef(int);
Parámetros: 
int: ID de la referencia a disminuir.
Proceso realizado: 
Llama al metodo decreaseReference de vMetaData, el cual baja el contador de referencias del ID indicado.

int addVRef(int);
Parámetros: 
int: ID de la referencia a aumentar.
Proceso realizado: 
Llama al metodo increaseReference de vMetaData, el cual sube el contador de referencias del ID indicado.

template <typename T> int vPlacement(vRef, T);
Parámetros:
vRef: referencia a llenar.
T: dato a guardar.
Proceso realizado:
Se obtiene el pedazo de memoria al que apunta la vRef y se llena con el dato tipo T por medio de casteos.

void * de_vReference(int);
Parámetros:
int: ID de referencia.
Proceso realizado:
Se accede a la lista de metadatos mediante su iterador y se analiza, por medio de un ciclo y  una comparación entre los datos de las vEntry de vMetaData y el ID suministrado, la existencia de una vRef. Si esta referencia es encontrada, se retorna su espacio en vHeap, de lo contrario se retorna 0.
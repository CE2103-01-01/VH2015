class vPager

public:

vPager();
Proceso realizado: crea un paginador, el cual no contiene variables, por lo tanto el constructor es vacío

~vPager();
Destruye al paginador, sin embargo, al no tener variables, es vacío.

std::string pageDown(void*, int, int);
Parámetros:
void*: dato a paginar.
int: número de referencia.
int: tamaño del objeto
Proceso realizado: accede a la carpeta temporal del programa en home, crea un archivo de nombre "idReferencia.cedlmm" de tipo binario y escribe en él, byte a byte, el contenido del objeto. Para esto se utiliza la aritmética de punteros y se recurre a la biblioteca ofstream de c++, la cual proveé funciones para la salida de archivos.

void pageUp(std::string, int, void*);	
Parámetros:
std::string: ruta de la página que contiene al objeto.
int: tamaño del objeto.
void*: puntero sin valor de retorno en el cual se guardará el objeto.
Proceso realizado: busca la página en la ruta indicada, si la encuentra lee byte a byte el contenido y lo copia en el puntero recibido como parámetro. Para esto se utiliza la aritmética de punteros y la biblioteca ifstream que provee funciones para la entrada de archivos.



class vDefragmenter

private:

pthread_cond_t* cond: variable de condición para control del pthread.
pthread_mutex_t* mutex: variable mutex para control de pthread.
bool* active: bandera booleana de estado.
void* initPos: posición inicial del vHeap.
void* finalPos: posición final del vHeap.
void* actualPos: posición actual del vHeap.
vList<vEntry>* memoryT: puntero al contenido de la metadata.

public:

vDefragmenter(void*, void*, vList<vEntry>*, pthread_cond_t*, pthread_mutex_t*);
Parámetros:
void*: puntero a posición inicial en vHeap.
void*: puntero a posición final en vHeap.
 vList<vEntry>*: puntero a contenido de metadata.
pthread_cond_t*: puntero a condición de pthread.
pthread_mutex_t*: puntero a mutex de pthread.
Proceso realizado: asigna las variables recibidas como parámetro.

~vDefragmenter();
Proceso realizado: destruye el desfragmentador.

void vDefragment();
Proceso realizado: toma el iterador de la lista de metadatos y la posición actual en el vHeap, que corresponderá a la inicial. Conforme avanza en la lista comprueba que las entradas se encuentren en vHeap, de estarlo compara la posición actual con la posición del dato, si son distintas reajusta.

pthread_mutex_t* getMutex();
Proceso realizado: retorna el mutex del pthread.

pthread_cond_t* getCond();
Proceso realizado: retorna la variable de condición del pthread.
